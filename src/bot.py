import os
import asyncio
import io

from aiogram import types, Bot, Dispatcher, executor
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher.filters import ChatTypeFilter, IsReplyFilter, IDFilter
import aioschedule

from async_model import AsyncMotyaModel
from model_middleware import ModelMiddleware
from mongo import ConfigDb
from image_gen import ImageGenerator


THROTTLE_RATE = 5
TOKEN = os.getenv("TG_TOKEN")
bot = Bot(TOKEN, parse_mode="HTML")
dp = Dispatcher(bot, storage=MemoryStorage())
MONGO_URL = os.getenv("MONGO_URL")
config_db = ConfigDb(MONGO_URL, "motya_gpt", "config")


async def send_post(model: AsyncMotyaModel):
    group = "@motya_blog"
    themes = config_db.get_themes()
    await bot.send_message(group, await model.create_random_post(themes))


async def posts_loop(model: AsyncMotyaModel):
    for time in ["8:10", "11:50", "14:05", "16:45", "19:05"]:
        aioschedule.every().day.at(time).do(send_post, model)
    while True:
        await aioschedule.run_pending()
        await asyncio.sleep(1)


async def on_startup(dp: Dispatcher):
    image_gen = ImageGenerator()
    motya = await AsyncMotyaModel.create(image_gen)
    dp.middleware.setup(ModelMiddleware(motya))
    asyncio.create_task(posts_loop(motya))
    await bot.set_my_commands([
        types.BotCommand("start", "–ü–æ–ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å –ú–æ—Ç—é"),
        types.BotCommand("draw", "–ù–∞—Ä–∏—Å–æ–≤–∞—Ç—å –∫–∞—Ä—Ç–∏–Ω–∫—É –ø–æ –∑–∞–ø—Ä–æ—Å—É")
    ])


async def on_draw_spam(message, *args, **kwargs):
    await message.reply(f"–æ–π üôÑ –∫–æ–º–∞–Ω–¥—É /draw –º–æ–∂–Ω–æ –Ω–∞–∂–∏–º–∞—Ç—å –Ω–µ —á–∞—â–µ —á–µ–º —Ä–∞–∑ –≤ {THROTTLE_RATE} —Å–µ–∫—É–Ω–¥ üòù")


@dp.message_handler(commands=["start"])
async def send_start(message: types.Message, model: AsyncMotyaModel):
    await types.ChatActions.typing()
    answer =  \
        "–ø—Ä–∏–≤–µ—Ç–∏–∫, –Ω–æ–≤—ã–π –¥—Ä—É–≥! üêæ –º–µ–Ω—è –∑–æ–≤—É—Ç –º–æ—Ç—è, —è –º–∞–ª–µ–Ω—å–∫–∏–π —Ç—É—à–∫–∞–Ω—á–∏–∫ üêπ –∏ —Ç–æ–ª—å–∫–æ –Ω–∞—á–∏–Ω–∞—é —É–∑–Ω–∞–≤–∞—Ç—å —ç—Ç–æ—Ç –±–æ–ª—å—à–æ–π –º–∏—Ä üåç" \
        "–º–æ–∂–µ—à—å —Å–º–µ–ª–æ –∑–∞–¥–∞–≤–∞—Ç—å –º–Ω–µ –ª—é–±—ã–µ –≤–æ–ø—Ä–æ—Å—ã! " \
        '\n\n–∫—Å—Ç–∞—Ç–∏! –ø–æ–¥–ø–∏—à–∏—Å—å –Ω–∞ –º–æ–π <a href="https://t.me/motya_blog">–±–ª–æ–≥</a>! üòá'
    await message.reply(answer)


@dp.message_handler(commands=["draw"])
@dp.throttled(on_draw_spam ,rate=THROTTLE_RATE)
async def send_image(message: types.Message, model: AsyncMotyaModel):
    prompt = message.get_args()
    if not prompt:
        msg = await message.answer("–¥—É–º–∞—é üêæ ...")
        answer = await model.answer(
            "–Ω–∞–ø–∏—à–∏ —á—Ç–æ–±—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–ø—Ä–∞–≤–∏–ª –≤–º–µ—Å—Ç–µ —Å –∫–æ–º–∞–Ω–¥–æ–π /draw —Ç–æ, —á—Ç–æ –æ–Ω —Ö–æ—á–µ—Ç –Ω–∞—Ä–∏—Å–æ–≤–∞—Ç—å"
        )
        await message.reply(answer)
        await msg.delete()
        return
    msg = await message.answer("—Ä–∏—Å—É—é ‚úèÔ∏èüêæ ...")
    image_bytes = await model.image_gen.get_images([prompt])
    file_ = types.InputFile(io.BytesIO(image_bytes[0])) 
    await message.reply_photo(file_, caption="–≥–æ—Ç–æ–≤–æ üé®üêæ")
    await msg.delete()


@dp.message_handler(ChatTypeFilter(types.ChatType.PRIVATE))
async def reply_to_message_privately(message: types.Message, model: AsyncMotyaModel):
    msg = await message.answer("—Å–µ–∫—É–Ω–¥–æ—á–∫—É üêæ ...")
    answer = await model.answer(message.text)
    await message.reply(answer)
    await msg.delete()


@dp.message_handler(IsReplyFilter(True))
async def reply_to_message_in_chat(message: types.Message, model: AsyncMotyaModel):
    replied_id = message.reply_to_message.from_id
    if replied_id == bot.id or replied_id == -1001928224337:
        replied_text = message.reply_to_message.text
        await types.ChatActions.typing()
        answer = await model.answer(f"–¢—ã –ø–∏—Å–∞–ª –ø—Ä–æ: {replied_text}. –û—Ç–≤–µ—Ç—å –Ω–∞: {message.text}")
        await message.reply(answer)
